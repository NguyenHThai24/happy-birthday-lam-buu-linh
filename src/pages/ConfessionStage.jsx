import React, { useState, useEffect, useMemo, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";

const ConfessionStage = ({ onComplete }) => {
  const [isUnlocked, setIsUnlocked] = useState(false);
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [showLetter, setShowLetter] = useState(false);
  const [currentLines, setCurrentLines] = useState([]);
  const [currentLineIndex, setCurrentLineIndex] = useState(0);
  const [currentCharIndex, setCurrentCharIndex] = useState(0);
  const [isTyping, setIsTyping] = useState(true);
  const [windowSize, setWindowSize] = useState({
    width: typeof window !== "undefined" ? window.innerWidth : 1200,
    height: typeof window !== "undefined" ? window.innerHeight : 800,
  });
  const letterContainerRef = useRef(null);

  // Memoize confession content
  const confessionContent = useMemo(
    () => [
      "G·ª≠i ch·ªã...",
      "C√≥ v√†i ƒëi·ªÅu em mu·ªën g·ª≠i ƒë·∫øn ch·ªã.",
      "T·ª´ ng√†y 27/08 - ng√†y ƒë·∫ßu ti√™n ch√∫ng ta tr√≤ chuy·ªán,",
      "em ƒë√£ nh·∫≠n ra ch·ªã l√† m·ªôt ng∆∞·ªùi r·∫•t ƒë·∫∑c bi·ªát.",
      "M·ªói l·∫ßn ƒë∆∞·ª£c n√≥i chuy·ªán c√πng ch·ªã,",
      "m·ªói l·∫ßn ch∆°i c·∫ßu l√¥ng c√πng nhau,",
      "ƒë·ªÅu mang ƒë·∫øn cho em nh·ªØng c·∫£m x√∫c th·∫≠t ƒë·∫πp.",
      "",
      "Ch·ªã lu√¥n mang l·∫°i cho em nƒÉng l∆∞·ª£ng t√≠ch c·ª±c.",
      "N·ª• c∆∞·ªùi, gi·ªçng n√≥i c·ªßa ch·ªã",
      "lu√¥n khi·∫øn m·ªçi th·ª© tr·ªü n√™n d·ªãu d√†ng.",
      "",
      "Nh·ªù c√≥ ch·ªã, em h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu",
      "v·ªÅ s·ª± tr∆∞·ªüng th√†nh, v·ªÅ c√°ch suy nghƒ© ch√≠n ch·∫Øn.",
      "Em tr√¢n tr·ªçng ƒëi·ªÅu ƒë√≥ v√¥ c√πng.",
      "",
      "Em bi·∫øt cu·ªôc s·ªëng kh√¥ng ph·∫£i l√∫c n√†o",
      "c≈©ng √™m ƒë·ªÅm v√† d·ªÖ d√†ng.",
      "S·∫Ω c√≥ nh·ªØng ng√†y ch·ªã m·ªát m·ªèi,",
      "th√¨ em v·∫´n s·∫Ω ·ªü ƒë√¢y, chia s·∫Ω s·ª± m·ªát m·ªèi c√πng ch·ªã.",
      "",
      "ƒêi·ªÅu em mong mu·ªën nh·∫•t",
      "l√† ƒë∆∞·ª£c th·∫•y ch·ªã lu√¥n h·∫°nh ph√∫c.",
      "ƒê∆∞·ª£c th·∫•y n·ª• c∆∞·ªùi r·∫°ng r·ª° c·ªßa ch·ªã,",
      "ƒë∆∞·ª£c th·∫•y ch·ªã s·ªëng th·∫≠t vui v·∫ª.",
      "",
      "Ch·ªâ c·∫ßn ƒë∆∞·ª£c l√†m m·ªôt ng∆∞·ªùi b·∫°n",
      "ƒë·ªìng h√†nh c√πng ch·ªã,",
      "v·ªõi em ƒë√≥ ƒë√£ l√† ƒëi·ªÅu qu√Ω gi√°.",
      "",
      "Em ch√∫c ch·ªã lu√¥n gi·ªØ ƒë∆∞·ª£c",
      "s·ª± l·∫°c quan v√† nhi·ªát huy·∫øt ·∫•y.",
      "H√£y c·ª© l√† ch√≠nh m√¨nh,",
      "nh∆∞ ch·ªã v·∫´n lu√¥n t·ªèa s√°ng.",
      "",
      "C·∫£m ∆°n ch·ªã v√¨ t·∫•t c·∫£...",
      "üíù",
    ],
    []
  );

  // T√≠nh to√°n s·ªë d√≤ng hi·ªÉn th·ªã d·ª±a tr√™n k√≠ch th∆∞·ªõc m√†n h√¨nh
  const MAX_VISIBLE_LINES = useMemo(() => {
    if (windowSize.height < 600) return 6;
    if (windowSize.height < 700) return 8;
    if (windowSize.height < 800) return 10;
    if (windowSize.height < 900) return 12;
    return 14;
  }, [windowSize.height]);

  // T√≠nh to√°n chi·ªÅu cao l√° th∆∞ d·ª±a tr√™n k√≠ch th∆∞·ªõc m√†n h√¨nh
  const letterHeight = useMemo(() => {
    if (windowSize.height < 600) return 400;
    if (windowSize.height < 700) return 450;
    if (windowSize.height < 800) return 500;
    if (windowSize.height < 900) return 550;
    return 600;
  }, [windowSize.height]);

  // T√≠nh to√°n k√≠ch th∆∞·ªõc ch·ªØ d·ª±a tr√™n k√≠ch th∆∞·ªõc m√†n h√¨nh
  const fontSize = useMemo(() => {
    if (windowSize.width < 640) return "text-base"; // mobile
    if (windowSize.width < 768) return "text-lg"; // tablet
    return "text-xl"; // desktop
  }, [windowSize.width]);

  // T√≠nh to√°n padding d·ª±a tr√™n k√≠ch th∆∞·ªõc m√†n h√¨nh
  const padding = useMemo(() => {
    if (windowSize.width < 640) return "p-6";
    if (windowSize.width < 768) return "p-8";
    return "p-12";
  }, [windowSize.width]);

  // Background elements
  const backgroundInk = useMemo(
    () =>
      Array.from({ length: 8 }, (_, i) => ({
        id: i,
        left: Math.random() * 100,
        top: Math.random() * 100,
        size: 30 + Math.random() * 50,
        rotation: Math.random() * 360,
        duration: 40 + Math.random() * 30,
        delay: Math.random() * 15,
      })),
    []
  );

  // Theo d√µi k√≠ch th∆∞·ªõc m√†n h√¨nh
  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // Password handlers
  const handlePasswordSubmit = (e) => {
    e.preventDefault();
    if (password === "2708") {
      setIsUnlocked(true);
      setError("");
      setTimeout(() => setShowLetter(true), 1000);
    } else {
      setError("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng üíî");
      setPassword("");
    }
  };

  const handleNumberClick = (num) => {
    if (password.length < 4) {
      setPassword(password + num);
      setError("");
    }
  };

  const handleDelete = () => {
    setPassword(password.slice(0, -1));
    setError("");
  };

  // Typewriter effect v·ªõi t·ª´ng ch·ªØ
  useEffect(() => {
    if (!showLetter || !isTyping) return;

    if (currentLineIndex < confessionContent.length) {
      const currentLine = confessionContent[currentLineIndex];

      if (currentCharIndex < currentLine.length) {
        const timer = setTimeout(() => {
          setCurrentCharIndex((prev) => prev + 1);
        }, 80);

        return () => clearTimeout(timer);
      } else {
        const timer = setTimeout(() => {
          setCurrentLines((prev) => {
            const newLine = {
              text: currentLine,
              id: currentLineIndex,
              isNew: true,
            };

            const newLines = [...prev, newLine];

            if (newLines.length > MAX_VISIBLE_LINES) {
              return newLines
                .slice(1)
                .map((line) => ({ ...line, isNew: false }));
            }
            return newLines;
          });

          setCurrentLineIndex((prev) => prev + 1);
          setCurrentCharIndex(0);
        }, 300);

        return () => clearTimeout(timer);
      }
    } else {
      setIsTyping(false);
    }
  }, [
    showLetter,
    isTyping,
    currentLineIndex,
    currentCharIndex,
    confessionContent,
    MAX_VISIBLE_LINES,
  ]);

  // Password screen (gi·ªØ nguy√™n)
  if (!isUnlocked) {
    return (
      <div className="relative min-h-screen bg-gradient-to-br from-pink-100 via-rose-100 to-pink-200 overflow-hidden flex items-center justify-center p-4">
        {/* Background hearts */}
        <div className="absolute inset-0">
          {backgroundInk.slice(0, 6).map((ink) => (
            <motion.div
              key={`ink-${ink.id}`}
              className="absolute text-pink-400/20 pointer-events-none"
              style={{
                left: `${ink.left}%`,
                top: `${ink.top}%`,
                fontSize: `${ink.size}px`,
                transform: `rotate(${ink.rotation}deg)`,
              }}
              animate={{
                y: [0, -30, 0],
                opacity: [0.1, 0.25, 0.1],
                scale: [1, 1.05, 1],
              }}
              transition={{
                duration: ink.duration,
                repeat: Infinity,
                delay: ink.delay,
                ease: "easeInOut",
              }}
            >
              ‚úé
            </motion.div>
          ))}
        </div>

        <motion.div
          className="relative z-10 bg-white/95 backdrop-blur-xl rounded-3xl border-2 border-pink-200 p-4 md:p-8 lg:p-12 shadow-2xl max-w-md w-full mx-4"
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <motion.div
            className="text-4xl md:text-6xl text-center mb-4 md:mb-6"
            animate={{ scale: [1, 1.1, 1] }}
            transition={{ duration: 2, repeat: Infinity }}
          >
            ‚úâÔ∏è
          </motion.div>

          <h2 className="text-xl md:text-2xl lg:text-3xl font-light text-transparent bg-gradient-to-r from-pink-600 to-rose-600 bg-clip-text text-center mb-2">
            Nh·∫≠p m·∫≠t kh·∫©u
          </h2>
          <p className="text-pink-500 text-center mb-6 md:mb-8 text-xs md:text-sm">
            ƒê·ªÉ m·ªü l√° th∆∞ ƒë·∫∑c bi·ªát üíå
          </p>

          <form
            onSubmit={handlePasswordSubmit}
            className="space-y-4 md:space-y-6"
          >
            {/* Password display */}
            <div className="flex justify-center gap-2 md:gap-3 mb-6 md:mb-8">
              {[0, 1, 2, 3].map((i) => (
                <motion.div
                  key={i}
                  className="w-10 h-10 md:w-14 md:h-14 rounded-xl md:rounded-2xl border-2 border-pink-300 bg-pink-50 flex items-center justify-center text-lg md:text-2xl font-medium text-pink-600"
                  animate={password.length === i ? { scale: [1, 1.1, 1] } : {}}
                  transition={{ duration: 0.3 }}
                >
                  {password[i] ? "‚Ä¢" : ""}
                </motion.div>
              ))}
            </div>

            {/* Error message */}
            <AnimatePresence>
              {error && (
                <motion.p
                  className="text-red-500 text-center text-xs md:text-sm"
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0 }}
                >
                  {error}
                </motion.p>
              )}
            </AnimatePresence>

            {/* Number pad */}
            <div className="grid grid-cols-3 gap-2 md:gap-3">
              {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (
                <motion.button
                  key={num}
                  type="button"
                  onClick={() => handleNumberClick(num.toString())}
                  className="h-12 md:h-14 rounded-lg md:rounded-xl bg-gradient-to-br from-pink-100 to-rose-100 hover:from-pink-200 hover:to-rose-200 text-pink-700 font-medium text-base md:text-xl transition-all shadow-sm"
                  whileTap={{ scale: 0.95 }}
                >
                  {num}
                </motion.button>
              ))}
              <motion.button
                type="button"
                onClick={handleDelete}
                className="h-12 md:h-14 rounded-lg md:rounded-xl bg-gradient-to-br from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 text-gray-700 font-medium text-xs md:text-sm transition-all shadow-sm"
                whileTap={{ scale: 0.95 }}
              >
                X√≥a
              </motion.button>
              <motion.button
                type="button"
                onClick={() => handleNumberClick("0")}
                className="h-12 md:h-14 rounded-lg md:rounded-xl bg-gradient-to-br from-pink-100 to-rose-100 hover:from-pink-200 hover:to-rose-200 text-pink-700 font-medium text-base md:text-xl transition-all shadow-sm"
                whileTap={{ scale: 0.95 }}
              >
                0
              </motion.button>
              <motion.button
                type="submit"
                disabled={password.length !== 4}
                className="h-12 md:h-14 rounded-lg md:rounded-xl bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600 text-white font-medium text-xs md:text-sm transition-all shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
                whileTap={{ scale: password.length === 4 ? 0.95 : 1 }}
              >
                M·ªü th∆∞
              </motion.button>
            </div>
          </form>

          <p className="text-pink-400 text-center mt-4 md:mt-6 text-xs">
            G·ª£i √Ω: Ng√†y ƒë·∫ßu ti√™n ch√∫ng ta n√≥i chuy·ªán üíï
          </p>
        </motion.div>
      </div>
    );
  }

  // Letter content v·ªõi responsive design
  return (
    <div className="relative min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-blue-100 overflow-hidden flex items-center justify-center p-2 sm:p-4">
      {/* Background ink splashes */}
      <div className="absolute inset-0">
        {backgroundInk.map((ink) => (
          <motion.div
            key={`ink-${ink.id}`}
            className="absolute text-blue-300/15 pointer-events-none"
            style={{
              left: `${ink.left}%`,
              top: `${ink.top}%`,
              fontSize: `${ink.size}px`,
              transform: `rotate(${ink.rotation}deg)`,
            }}
            animate={{
              y: [0, -20, 0],
              opacity: [0.05, 0.15, 0.05],
              rotate: [ink.rotation, ink.rotation + 10, ink.rotation],
            }}
            transition={{
              duration: ink.duration,
              repeat: Infinity,
              delay: ink.delay,
              ease: "easeInOut",
            }}
          >
            ‚úë
          </motion.div>
        ))}
      </div>

      <AnimatePresence>
        {showLetter && (
          <motion.div
            className="relative z-10 w-full max-w-4xl mx-2 sm:mx-4"
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 1.2, type: "spring" }}
          >
            {/* Paper v·ªõi chi·ªÅu cao responsive */}
            <div
              className="relative bg-[#fefefe] border-l-4 border-blue-300 shadow-2xl overflow-hidden"
              style={{ height: `${letterHeight}px` }}
            >
              {/* Hi·ªáu ·ª©ng gi·∫•y vi·∫øt th∆∞ */}
              <div className="absolute inset-0 bg-gradient-to-b from-blue-50/30 to-transparent" />
              <div className="absolute left-8 sm:left-12 md:left-16 top-0 bottom-0 w-0.5 bg-blue-200/30" />

              {/* C√°c d√≤ng k·∫ª ngang */}
              <div className="absolute inset-0 opacity-20">
                {Array.from(
                  { length: Math.floor(letterHeight / 32) },
                  (_, i) => (
                    <div
                      key={i}
                      className="w-full h-6 sm:h-8 border-b border-blue-100"
                      style={{ marginTop: `${i * 32}px` }}
                    />
                  )
                )}
              </div>

              {/* N·ªôi dung th∆∞ v·ªõi container responsive */}
              <div
                ref={letterContainerRef}
                className={`relative h-full font-handwriting overflow-hidden ${padding}`}
              >
                {/* Ti√™u ƒë·ªÅ - ch·ªâ hi·ªÉn th·ªã khi ch∆∞a c√≥ nhi·ªÅu d√≤ng */}
                {currentLines.length < 5 && (
                  <motion.div
                    className="text-center mb-4 sm:mb-6 md:mb-8"
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                  >
                    <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl text-blue-900 mb-2 tracking-wide">
                      Th∆∞ g·ª≠i ch·ªã
                    </h1>
                    <div className="w-20 sm:w-24 md:w-32 h-0.5 bg-blue-400 mx-auto opacity-60" />
                  </motion.div>
                )}

                {/* N·ªôi dung ch√≠nh v·ªõi hi·ªáu ·ª©ng g√µ t·ª´ng ch·ªØ */}
                <div
                  className={`space-y-1 text-blue-900 leading-7 sm:leading-8 ${fontSize}`}
                >
                  <AnimatePresence>
                    {currentLines.map((line, index) => (
                      <motion.div
                        key={line.id}
                        className={`${line.text === "" ? "h-3 sm:h-4" : ""} ${
                          line.text.includes("üíù")
                            ? "text-center text-xl sm:text-2xl"
                            : ""
                        }`}
                        initial={{
                          opacity: 0,
                          y: line.isNew ? 20 : -20,
                          x: line.isNew ? -10 : 0,
                        }}
                        animate={{
                          opacity: 1,
                          y: 0,
                          x: 0,
                        }}
                        exit={{
                          opacity: 0,
                          y: -20,
                          height: 0,
                          transition: { duration: 0.3 },
                        }}
                        transition={{
                          duration: 0.6,
                          ease: "easeOut",
                        }}
                        layout
                      >
                        {line.text === "" ? (
                          <br />
                        ) : (
                          <span className="inline-block">{line.text}</span>
                        )}
                      </motion.div>
                    ))}

                    {/* D√≤ng ƒëang ƒë∆∞·ª£c g√µ */}
                    {currentLineIndex < confessionContent.length && (
                      <motion.div
                        className={`text-blue-900 leading-7 sm:leading-8 ${fontSize}`}
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                      >
                        <span className="inline-block">
                          {confessionContent[currentLineIndex].substring(
                            0,
                            currentCharIndex
                          )}
                          <motion.span
                            className="ml-0.5 text-blue-600"
                            animate={{ opacity: [1, 0, 1] }}
                            transition={{ duration: 0.8, repeat: Infinity }}
                          >
                            ‚ñä
                          </motion.span>
                        </span>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>

                {/* Ch·ªØ k√Ω - ch·ªâ hi·ªÉn th·ªã khi ƒë·∫øn cu·ªëi */}
                {!isTyping && currentLineIndex >= confessionContent.length && (
                  <motion.div
                    className="text-center mt-6 sm:mt-8"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.5 }}
                  >
                    <div className="inline-block text-right">
                      <p className="text-blue-800 text-base sm:text-lg mb-1">
                        V·ªõi t·∫•t c·∫£ s·ª± ch√¢n th√†nh,
                      </p>
                      <div className="w-32 sm:w-40 md:w-48 h-0.5 bg-blue-400 mb-2 opacity-60" />
                      <p className="text-blue-900 text-xl sm:text-2xl font-bold tracking-wider">
                        M·ªôt ng∆∞·ªùi b·∫°n
                      </p>
                    </div>
                  </motion.div>
                )}
              </div>

              {/* D·∫•u m·ª±c trang tr√≠ */}
              <motion.div
                className="absolute bottom-4 right-4 sm:bottom-6 sm:right-6 w-8 h-8 sm:w-12 sm:h-12 text-blue-400/40"
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 2, type: "spring" }}
              >
                üíß
              </motion.div>
            </div>

            {/* N√∫t ƒë√≥ng */}
            {!isTyping && currentLineIndex >= confessionContent.length && (
              <motion.button
                onClick={() => onComplete?.("completed")}
                className="mt-4 sm:mt-6 md:mt-8 mx-auto block bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 sm:px-8 sm:py-3 rounded-full font-handwriting text-base sm:text-lg transition-all shadow-lg"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.5 }}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                G·∫•p th∆∞ l·∫°i
              </motion.button>
            )}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Th√™m CSS cho font ch·ªØ vi·∫øt tay */}
      <style jsx>{`
        .font-handwriting {
          font-family: "Comic Sans MS", "Segoe UI", cursive, sans-serif;
          font-weight: 500;
        }
      `}</style>
    </div>
  );
};

export default ConfessionStage;
